# Advent of Code 2023

```elixir
Mix.install([
  {:kino, "~> 0.11.3"},
  {:kino_aoc, "~> 0.1.5"}
])

require Logger
```

## The Problem

Something is wrong with global snow production, and you've been selected to take a look. The Elves have even given you a map; on it, they've used stars to mark the top fifty locations that are likely to be having problems.

You've been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

## Day 1: Trebuchet?!

### Part 1

You try to ask why they can't just use a weather machine ("not powerful enough") and where they're even sending you ("the sky") and why your map looks mostly blank ("you sure ask a lot of questions") and hang on did you just say the sky ("of course, where do you think snow comes from") when you realize that the Elves are already loading you into a trebuchet ("please hold still, we need to strap you in").

As they're making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.

The newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.

For example:

```
1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet
```

In this example, the calibration values of these four lines are `12`, `38`, `15`, and `77`. Adding these together produces `142`.

Consider your entire calibration document. What is the sum of all of the calibration values?

<!-- livebook:{"break_markdown":true} -->

We can solve this multiple ways, but I'm going to use a regular expression to filter out non-digits from each line, extract only the first and last values and then convert it to integers.

From the example `treb7uchet` only has 1 number, so I'll add a case to repeat that number before parsing.

Finally, after each line is processed, it will just run through `Enum.sum/2` to get the final result.

```elixir
defmodule AdventOfCode.Day1.Part1 do
  def parse_input(input) do
    input
    |> String.split("\n")
  end

  def process(input) do
    input
    |> parse_input()
    |> Enum.map(&process_line/1)
    |> Enum.sum()
  end

  def process_line(line) do
    numbers =
      String.replace(line, ~r/\D/, "")
      |> String.graphemes()

    "#{List.first(numbers)}#{List.last(numbers)}"
    |> String.to_integer()
  end
end
```

Now that we've gotten our logic in place, we need to fetch the input and perform the calculation.

There is a published [Kino](https://hex.pm/packages/kino) package for [interacting with Advent of Code](https://hex.pm/packages/kino_aoc) that I'll use to fetch the input.

<!-- livebook:{"attrs":{"assign_to":"day1","day":"1","session_secret":"AOC_COOKIE","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, day1} = KinoAOC.download_puzzle("2023", "1", System.fetch_env!("LB_AOC_COOKIE"))
```

```elixir
values = AdventOfCode.Day1.Part1.parse_input(day1)

frame = Kino.Frame.new()

table =
  Kino.DataTable.new(%{
    "Items" => values,
    "Values" => Enum.map(values, &AdventOfCode.Day1.Part1.process_line/1)
  })

Kino.Frame.render(frame, table)

frame
```

Great, we now have the input for today. Let's run it and perform the calculation.

```elixir
AdventOfCode.Day1.Part1.process(day1)
```

### Part 2

Your calculation isn't quite right. It looks like some of the digits are actually spelled out with letters: `one`, `two`, `three`, `four`, `five`, `six`, `seven`, `eight`, and `nine` also count as valid "digits".

Equipped with this new information, you now need to find the real first and last digit on each line. For example:

```
two1nine
eightwothree
abcone2threexyz
xtwone3four
4nineeightseven2
zoneight234
7pqrstsixteen
```

In this example, the calibration values are `29`, `83`, `13`, `24`, `42`, `14`, and `76`. Adding these together produces `281`.

What is the sum of all of the calibration values?

<!-- livebook:{"break_markdown":true} -->

Ok, this will be a bit dirty, but there isn't really a better way of doing this other than manual replacement for each line. So we'll replace string number labels with actual numbers in the string, and then re-run the same process as part 1.

It also seems that order is important. ~~`eightwothree` should evaluate to `8wo3` when converting words to digits.~~ Sometimes there might be number strings with overlapping digits, so `oneight` should translate to `18`, so `eightwothree` should evaluate to `823`, not `8wo3`.

```elixir
defmodule AdventOfCode.Day1.Part2 do
  def process(input) do
    input
    |> AdventOfCode.Day1.Part1.parse_input()
    |> Enum.map(&process_line/1)
    |> Enum.sum()
  end

  def process_line(line) do
    line
    |> AdventOfCode.Day1.Part2.parse_line()
    |> AdventOfCode.Day1.Part1.process_line()
  end

  def parse_line(line) do
    Regex.scan(~r/(?=(\d|one|two|three|four|five|six|seven|eight|nine))/, line)
    |> List.flatten()
    |> Enum.map_join("", &AdventOfCode.Day1.Part2.label_to_number/1)
  end

  def label_to_number("one"), do: "1"
  def label_to_number("two"), do: "2"
  def label_to_number("three"), do: "3"
  def label_to_number("four"), do: "4"
  def label_to_number("five"), do: "5"
  def label_to_number("six"), do: "6"
  def label_to_number("seven"), do: "7"
  def label_to_number("eight"), do: "8"
  def label_to_number("nine"), do: "9"
  def label_to_number(label), do: label
end
```

```elixir
values = AdventOfCode.Day1.Part1.parse_input(day1)

frame = Kino.Frame.new()

table =
  Kino.DataTable.new(%{
    "Items" => values,
    "Values" => Enum.map(values, &AdventOfCode.Day1.Part2.process_line/1)
  })

Kino.Frame.render(frame, table)

frame
```

```elixir
AdventOfCode.Day1.Part2.process(day1)
```

## Day 2: Cube Conundrum

### Part 1

You're launched high into the atmosphere! The apex of your trajectory just barely reaches the surface of a large island floating in the sky. You gently land in a fluffy pile of leaves. It's quite cold, but you don't see much snow. An Elf runs over to greet you.

The Elf explains that you've arrived at **Snow Island** and apologizes for the lack of snow. He'll be happy to explain the situation, but it's a bit of a walk, so you have some time. They don't get many visitors up here; would you like to play a game in the meantime?

As you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.

To get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He'll do this a few times per game.

You play several games and record the information from each game (your puzzle input). Each game is listed with its ID number (like the `11` in `Game 11: ...`) followed by a semicolon-separated list of subsets of cubes that were revealed from the bag (like `3 red`, `5 green`, `4 blue`).

For example, the record of a few games might look like this:

```
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
```

In game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.

The Elf would first like to know which games would have been possible if the bag contained **only 12 red cubes, 13 green cubes, and 14 blue cubes**?

In the example above, games 1, 2, and 5 would have been **possible** if the bag had been loaded with that configuration. However, game 3 would have been **impossible** because at one point the Elf showed you 20 red cubes at once; similarly, game 4 would also have been **impossible** because the Elf showed you 15 blue cubes at once. If you add up the IDs of the games that would have been possible, you get 8.

Determine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes. **What is the sum of the IDs of those games?**

<!-- livebook:{"break_markdown":true} -->

Alright, so for each round in a game, we have to compare the numbers against our pre-determined constraints for the different colors (12 for red, 13 for green, 14 for blue). I'll assign each color as a key in a map and then split the game results into each round. Then, if any of the round have a color that exceed the maximum, that whole game is disqualified.

```elixir
defmodule AdventOfCode.Day2.Part1 do
  @limits %{
    "red" => 12,
    "green" => 13,
    "blue" => 14
  }

  def parse_input(input) do
    input
    |> String.trim("\n")
    |> String.split("\n")
  end

  def process(input) do
    input
    |> parse_input()
    |> Enum.map(&parse_game/1)
    |> Enum.map(&process_game/1)
    |> Enum.sum()
  end

  def parse_game(game) do
    ["Game " <> id, rest] = String.split(game, ": ", trim: true)

    turns =
      String.split(rest, "; ")
      |> Enum.map(fn set ->
        String.split(set, ", ")
        |> Enum.into(%{}, fn turn ->
          [count, color] = String.split(turn, " ")
          {color, String.to_integer(count)}
        end)
      end)

    {String.to_integer(id), turns}
  end

  def process_game({id, _turns} = game) do
    if is_game_possible?(game) do
      id
    else
      0
    end
  end

  def is_turn_impossible?(turn) do
    blue = Map.get(turn, "blue", 0)
    red = Map.get(turn, "red", 0)
    green = Map.get(turn, "green", 0)

    blue > Map.get(@limits, "blue") || red > Map.get(@limits, "red") ||
      green > Map.get(@limits, "green")
  end

  def is_game_possible?({_id, turns}) do
    not Enum.any?(turns, &is_turn_impossible?/1)
  end
end
```

Let's test against the sample data to see if our solution works.

```elixir
input = """
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
"""

input
|> AdventOfCode.Day2.Part1.process()
```

Let's now load the actual data set and calculate the answer.

<!-- livebook:{"attrs":{"assign_to":"day2","day":"2","session_secret":"AOC_COOKIE","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, day2} = KinoAOC.download_puzzle("2023", "2", System.fetch_env!("LB_AOC_COOKIE"))
```

```elixir
values = AdventOfCode.Day2.Part1.parse_input(day2)

frame = Kino.Frame.new()

parsed_games =
  Enum.map(values, fn game ->
    AdventOfCode.Day2.Part1.parse_game(game)
  end)

results =
  table =
  Kino.DataTable.new(%{
    "Game" => Enum.map(parsed_games, fn {label, _} -> label end),
    "Possible?" => Enum.map(parsed_games, &AdventOfCode.Day2.Part1.is_game_possible?/1)
  })

Kino.Frame.render(frame, table)

frame
```

```elixir
AdventOfCode.Day2.Part1.process(day2)
```

### Part 2

The Elf says they've stopped producing snow because they aren't getting any water! He isn't sure why the **water** stopped; however, he can show you how to get to the water source to check it out for yourself. It's just up ahead!

As you continue your walk, the Elf poses a second question: in each game you played, what is the **fewest number of cubes of each color** that could have been in the bag to make the game possible?

Again consider the example games from earlier:

```
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
```

In game 1, the game could have been played with as few as 4 red, 2 green, and 6 blue cubes. If any color had even one fewer cube, the game would have been impossible.
Game 2 could have been played with a minimum of 1 red, 3 green, and 4 blue cubes.
Game 3 must have been played with at least 20 red, 13 green, and 6 blue cubes.
Game 4 required at least 14 red, 3 green, and 15 blue cubes.
Game 5 needed no fewer than 6 red, 3 green, and 2 blue cubes in the bag.

The **power** of a set of cubes is equal to the numbers of red, green, and blue cubes multiplied together. The power of the minimum set of cubes in game 1 is 48. In games 2-5 it was 12, 1560, 630, and 36, respectively. Adding up these five powers produces the sum 2286.

For each game, find the minimum set of cubes that must have been present. **What is the sum of the power of these sets?**

<!-- livebook:{"break_markdown":true} -->

This seems to be very similar, but for each we need to grab the lowest value for each color in each set, then multiply all of those together and sum the total. Additionally, we don't need to filter out any _impossible_ games.

```elixir
defmodule AdventOfCode.Day2.Part2 do
  def parse_input(input) do
    input
    |> String.trim("\n")
    |> String.split("\n")
  end

  def process(input) do
    input
    |> parse_input()
    |> Enum.map(&AdventOfCode.Day2.Part1.parse_game/1)
    |> Enum.map(&process_game/1)
    |> Enum.map(&calculate/1)
    |> Enum.sum()
  end

  # def parse_game(game) do
  #   ["Game " <> id, rest] = String.split(game, ": ", trim: true)

  #   turns =
  #     String.split(rest, "; ")
  #     |> Enum.map(fn set ->
  #       String.split(set, ", ")
  #       |> Enum.into(%{}, fn turn ->
  #         [count, color] = String.split(turn, " ")
  #         {color, String.to_integer(count)}
  #       end)
  #     end)

  #   {String.to_integer(id), turns}
  # end

  def process_game({_id, turns}) do
    Enum.reduce(turns, %{"blue" => 0, "red" => 0, "green" => 0}, fn turn, acc ->
      blue = max(Map.get(acc, "blue"), Map.get(turn, "blue", 0))
      green = max(Map.get(acc, "green"), Map.get(turn, "green", 0))
      red = max(Map.get(acc, "red"), Map.get(turn, "red", 0))

      %{"blue" => blue, "green" => green, "red" => red}
    end)
  end

  def calculate(values) do
    Map.values(values)
    |> Enum.reduce(fn value, acc -> value * acc end)
  end
end
```

```elixir
values = AdventOfCode.Day2.Part2.parse_input(day2)

frame = Kino.Frame.new()

parsed_games =
  Enum.map(values, fn game ->
    AdventOfCode.Day2.Part1.parse_game(game)
  end)

results =
  table =
  Kino.DataTable.new(%{
    "Game" => Enum.map(parsed_games, fn {label, _} -> label end),
    "Calculation" =>
      Enum.map(parsed_games, fn game ->
        AdventOfCode.Day2.Part2.process_game(game)
        |> AdventOfCode.Day2.Part2.calculate()
      end)
  })

Kino.Frame.render(frame, table)

frame
```

We'll now validate against the test data and then prepare to submit.

```elixir
input = """
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
"""

AdventOfCode.Day2.Part2.process(input)
```

```elixir
AdventOfCode.Day2.Part2.process(day2)
```

## Day 3: Gear Ratios

### Part 1

You and the Elf eventually reach a **gondola lift** station; he says the gondola lift will take you up to the *water source*, but this is as far as he can bring you. You go inside.

It doesn't take long to find the gondolas, but there seems to be a problem: they're not moving.

"Aaah!"

You turn around to see a slightly-greasy Elf with a wrench and a look of surprise. "Sorry, I wasn't expecting anyone! The gondola lift isn't working right now; it'll still be a while before I can fix it." You offer to help.

The engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can **add up all the part numbers** in the engine schematic, it should be easy to work out which part is missing.

The engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don't really understand, but apparently any number adjacent to a symbol, even diagonally, is a "part number" and should be included in your sum. (Periods (`.`) do not count as a symbol.)

Here is an example engine schematic:

```
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
```

In this schematic, two numbers are not part numbers because they are **not** adjacent to a symbol: `114` (top right) and `58` (middle right). Every other number **is** adjacent to a symbol and so is a part number; their sum is `4361`.

Of course, the actual engine schematic is much larger. **What is the sum of all of the part numbers in the engine schematic?**

<!-- livebook:{"break_markdown":true} -->

To solve this, it seems as if I first need to find the horizontal position (X) of all the symbols for each line (Y). Then I can do that for each number. Then, if `X +/- 1` and `Y +/- 1` contains a string of numbers, we have a match.

I'll just use a two dimensional array for this with the outer array being the line number and and the inner array being the horizontal position.

```elixir
defmodule AdventOfCode.Day3.Part1 do
  def process_input(input) do
    input
    |> String.split("\n")
  end

  def process(lines) do
    possible_parts =
      lines
      |> Enum.map(&parse_part_positions/1)
      |> Enum.with_index(fn el, index -> {index, el} end)

    symbols =
      lines
      |> Enum.map(&parse_symbol_positions/1)
      |> Enum.with_index(fn el, index -> {index, el} end)
      |> flatten_symbols()

    for {row, part_locations} <- possible_parts,
        part_location <- part_locations,
        {symbol_y, symbol_x} <- symbols do
      if is_adjacent?(row, part_location, {symbol_y, symbol_x}) do
        {part, _} = part_location
        String.to_integer(part)
      end
    end
    |> Enum.filter(fn value -> not is_nil(value) end)
  end

  def parse_part_positions(line) do
    locations =
      Regex.scan(~r/(\d+)/, line, return: :index)
      |> Enum.map(fn [x, _] -> x end)

    parts =
      Regex.scan(~r/(\d+)/, line)
      |> Enum.map(fn [x, _] -> x end)

    Enum.zip([parts, locations])
  end

  def parse_symbol_positions(line) do
    Regex.scan(~r/([^\.\d]+)/, line, return: :index)
    |> Enum.map(fn [{x, _}, _] -> x end)
  end

  def flatten_symbols(symbols) do
    for {symbol_y, symbol_x_values} <- symbols,
        symbol_x <- symbol_x_values do
      {symbol_y, symbol_x}
    end
  end

  def is_adjacent?(_row_number, _part_location, {_symbol_y, []}), do: false

  def is_adjacent?(row_number, {_part, {start_index, part_length}}, {symbol_y, symbol_x}) do
    part_y = row_number

    Range.to_list(start_index..(start_index + part_length - 1))
    |> Enum.any?(fn part_x ->
      symbol_x_range = (symbol_x - 1)..(symbol_x + 1)
      symbol_y_range = (symbol_y - 1)..(symbol_y + 1)
      part_x in symbol_x_range and part_y in symbol_y_range
    end)
  end
end
```

```elixir
input = """
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
"""

input
|> AdventOfCode.Day3.Part1.process_input()
|> AdventOfCode.Day3.Part1.process()
|> Enum.sum()
```

<!-- livebook:{"attrs":{"assign_to":"day3","day":"3","session_secret":"AOC_COOKIE","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, day3} = KinoAOC.download_puzzle("2023", "3", System.fetch_env!("LB_AOC_COOKIE"))
```

```elixir
day3
|> AdventOfCode.Day3.Part1.process_input()
|> AdventOfCode.Day3.Part1.process()
|> Enum.sum()
```

### Part 2

The engineer finds the missing part and installs it in the engine! As the engine springs to life, you jump in the closest gondola, finally ready to ascend to the water source.

You don't seem to be going very fast, though. Maybe something is still wrong? Fortunately, the gondola has a phone labeled "help", so you pick it up and the engineer answers.

Before you can explain the situation, she suggests that you look out the window. There stands the engineer, holding a phone in one hand and waving with the other. You're going so slowly that you haven't even left the station. You exit the gondola.

The missing part wasn't the only issue - one of the gears in the engine is wrong. A **gear** is any `*` symbol that is adjacent to **exactly two part numbers**. Its **gear ratio** is the result of multiplying those two numbers together.

This time, you need to find the gear ratio of every gear and add them all up so that the engineer can figure out which gear needs to be replaced.

Consider the same engine schematic again:

```
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
```

In this schematic, there are **two gears**. The first is in the top left; it has part numbers `467` and `35`, so its gear ratio is `16345`. The second gear is in the lower right; its gear ratio is `451490`. (The `*` adjacent to `617` is not a gear because it is only adjacent to one part number.) Adding up all of the gear ratios produces `467835`.

**What is the sum of all of the gear ratios in your engine schematic?**

<!-- livebook:{"break_markdown":true} -->

I need to only mark `*` as a valid symbol and then invert the operations. Instead of checking each part to see an adjacent gear, I need to check every gear and see how many adjacent parts there are. If there are 2, then it is a valid gear, and I'll multiply the 2 part numbers together, and then sum it at the end.

```elixir
defmodule AdventOfCode.Day3.Part2 do
  def process(lines) do
    possible_parts =
      lines
      |> Enum.map(&AdventOfCode.Day3.Part1.parse_part_positions/1)
      |> Enum.with_index(fn el, index -> {index, el} end)

    symbols =
      lines
      |> Enum.map(&parse_symbol_positions/1)
      |> Enum.with_index(fn el, index -> {index, el} end)
      |> AdventOfCode.Day3.Part1.flatten_symbols()

    Enum.map(symbols, &list_adjacent_parts(&1, possible_parts))
    |> Enum.filter(fn adjacent_parts -> length(adjacent_parts) == 2 end)
    |> Enum.map(fn [part1, part2] -> part1 * part2 end)
  end

  def parse_symbol_positions(line) do
    Regex.scan(~r/(\*+)/, line, return: :index)
    |> Enum.map(fn [{x, _}, _] -> x end)
  end

  def list_adjacent_parts(symbol, parts) do
    for {part_y, locations} <- parts,
        location <- locations do
      if AdventOfCode.Day3.Part1.is_adjacent?(part_y, location, symbol) do
        {part, _} = location
        String.to_integer(part)
      end
    end
    |> Enum.filter(fn value -> not is_nil(value) end)
  end
end
```

```elixir
input = """
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
"""

input
|> AdventOfCode.Day3.Part1.process_input()
|> AdventOfCode.Day3.Part2.process()
|> Enum.sum()
```

```elixir
day3
|> AdventOfCode.Day3.Part1.process_input()
|> AdventOfCode.Day3.Part2.process()
|> Enum.sum()
```

<!-- livebook:{"offset":24075,"stamp":{"token":"XCP.82tPXAN1aY6JXCDmsL0UtNx9rLsPKLnIEHxmQ9WTHO-7fWsZSNfmmFaBAbf4ACNR3OTadqxVYco5AoAQmwCeia6TfkxdJ1MJQetrdiDR4Y69mpKrmw","version":2}} -->
